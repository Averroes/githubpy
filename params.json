{"tagline":"A simple GitHub v3 API SDK for Python","body":"githubpy\r\n========\r\n\r\n### Welcome\r\n\r\ngithubpy is a simple Python SDK for GitHub API v3. It is a small single-file and easy-to-use.\r\n\r\nSample code:\r\n\r\n```\r\n>>> gh = GitHub()\r\n>>> gh.users('michaelliao').get()\r\n{'public_repos': 11, 'name': u'Michael Liao', ... }\r\n```\r\n\r\nRequirement:\r\n\r\nPython 2.5 (with simplejson), 2.6, 2.7\r\n\r\n### Call APIs\r\n\r\nAll APIs are dynamic calls. You can construct API call by GitHub's API doc.\r\n\r\nFor example, according to GitHub API doc of how to [get a single user](http://developer.github.com/v3/users/#get-a-single-user):\r\n\r\n```\r\nGET /users/:user\r\n```\r\n\r\nThere is a variable :user, so we can make a call in Python like this:\r\n\r\n```\r\n>>> gh.users('michaelliao').get()\r\n{'public_repos': 11, 'name': u'Michael Liao', ...}\r\n```\r\n\r\nReturns dict but also can be treated as object:\r\n\r\n```\r\n>>> u['name']\r\nu'Michael Liao'\r\n>>> u.name\r\nu'Michael Liao'\r\n```\r\n\r\nAnother example of how to [list issues for a repository](http://developer.github.com/v3/issues/#list-issues-for-a-repository):\r\n\r\n```\r\nGET /repos/:owner/:repo/issues\r\nParameters\r\n  milestone\r\n    Integer Milestone number\r\n    none for Issues with no Milestone.\r\n    * for Issues with any Milestone.\r\n  state\r\n    open, closed, default: open\r\n  assignee\r\n    String User login\r\n    none for Issues with no assigned User.\r\n    * for Issues with any assigned User.\r\n  ...\r\n```\r\n\r\nPassing keyword arguments in Python code for getting 'open' issues which assigned to 'michaelliao':\r\n\r\n```\r\n>>> gh.repos('michaelliao')('githubpy').issues \\\r\n      .get(state='open', assignee='michaelliao')\r\n```\r\n\r\n### Using POST, PUT, PATCH and DELETE\r\n\r\n[Create an issue](http://developer.github.com/v3/issues/#create-an-issue):\r\n\r\n```\r\nPOST /repos/:owner/:repo/issues\r\nInput\r\n  title\r\n    Required string\r\n  body\r\n    Optional string\r\n  assignee\r\n    Optional string - Login for the user that this issue should be assigned to.\r\n  ...\r\n```\r\n\r\nPython code to create an issue:\r\n\r\n```\r\n>>> gh.repos('michaelliao')('githubpy').issues \\\r\n      .post(title='sample issue', body='found a bug')\r\n```\r\n\r\nRemember all APIs are dynamic calls so you don't need update this SDK if GitHub add new APIs.\r\n\r\n### Authentication\r\n\r\nAnonymous API call:\r\n\r\n```\r\n>>> gh = GitHub()\r\n```\r\n\r\nBasic authentication using username and password:\r\n\r\n```\r\n>>> gh = GitHub(username='loginname', password='your-password')\r\n```\r\n\r\nOAuth authentication is a bit complicated:\r\n\r\nStep 1: redirect user to the generated URL:\r\n\r\n```\r\n>>> gh = GitHub(client_id='1234', client_secret='secret')\r\n>>> print gh.authorize_url(state='a-random-string')\r\n'https://github.com/login/oauth/authorize?client_id=1234'\r\n```\r\n\r\nStep 2: GitHub redirects back to your site with parameter 'code' and 'state' (optional). Then get an access token:\r\n\r\n```\r\n>>> code = request.input('code')\r\n>>> state = request.input('state')\r\n>>> print gh.get_access_token(code, state)\r\n'abc1234567xyz'\r\n```\r\n\r\nStep 3: Using access token as authentication to call APIs:\r\n\r\n```\r\n>>> gh = GitHub(access_token='abc1234567xyz')\r\n```\r\n\r\n### Errors\r\n\r\nApiError raises if something wrong. There are 2 sub-classes ApiAuthError and ApiNotFoundError.\r\n\r\n```\r\ntry:\r\n    gh.user.emails.delete('email@example.com')\r\nexcept ApiNotFoundError, e:\r\n    print e, e.request, e.response\r\n```\r\n\r\nNOTE: You may get ApiNotFoundError (404 Not Found) even if the URL is correct but authentication fail. According to GitHub's doc:\r\n\r\n```\r\nRequests that require authentication will return 404, instead of 403, \r\nin some places. This is to prevent the accidental leakage of private \r\nrepositories to unauthorized users.\r\n```\r\n\r\n### Rate Limiting\r\n\r\nYou can find rate limiting after API call:\r\n\r\n```\r\n>>> u = gh.users('michaelliao').get()\r\n>>> gh.x_ratelimit_limit\r\n5000\r\n>>> gh.x_ratelimit_remaining\r\n4999\r\n```\r\n\r\n### Licensing\r\n\r\ngithubpy is distributed under [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0.txt). See LICENSE file.\r\n\r\n### Enjoy!\r\n","name":"Githubpy","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}